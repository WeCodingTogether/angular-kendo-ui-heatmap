/**-----------------------------------------------------------------------------------------
* Copyright © 2023 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, Input } from '@angular/core';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-l10n";
/**
 * Represents the [Kendo UI AppBar component for Angular]({% slug overview_appbar %}).
 * Used to display information, actions, branding titles and additional navigation on the current screen.
 */
export class AppBarComponent {
    constructor(localizationService) {
        this.localizationService = localizationService;
        this.hostClass = true;
        /**
         * Specifies the position of the AppBar
         * ([see example]({% slug positioning_appbar %}#toc-position)).
         *
         * * The possible values are:
         * * `top` (Default)&mdash;Positions the AppBar at the top of the content.
         *    Setting the `position` property to `top` requires adding the Appbar component before the page content.
         *    The position property applies CSS `top: 0` style in [`fixed mode`]({% slug api_navigation_appbarcomponent %}#toc-positionMode) and also adds a `box-shadow` to the bottom of the AppBar.
         *
         * * `bottom`&mdash;Positions the AppBar at the bottom of the content.
         *    Setting the `position` property to `bottom` requires adding the Appbar component after the page content.
         *   The position property applies CSS `bottom: 0` style in [`fixed mode`]({% slug api_navigation_appbarcomponent %}#toc-positionMode) and also adds a `box-shadow ` to the top of the AppBar.
         *
         */
        this.position = 'top';
        /**
         * Specifies the positionMode of the AppBar
         * ([see example]({% slug positioning_appbar %}#toc-positionmode)).
         *
         * * The possible values are:
         * * `static` (Default)&mdash;Does not position the AppBar in any special way. It is positioned according to the normal flow of the page.
         * * `sticky`&mdash;Positions the AppBar based on the user's scroll position. A sticky element toggles between static and fixed CSS [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) property, depending on the scroll position.
         * * `fixed`&mdash;Positions the AppBar relative to the viewport. It always stays in the same place even if the page is scrolled.
         */
        this.positionMode = 'static';
        /**
         * Specifies the theme color of the AppBar.
         * The theme color will be applied as background color of the component.
         *
         *
         * * The possible values are:
         * * `light` (Default)&mdash;Applies coloring based on light theme color.
         * * `dark`&mdash;Applies coloring based on dark theme color.
         * * `inherit`&mdash; Applies inherited coloring value.
         *
         */
        this.themeColor = 'light';
        this.rtl = false;
        validatePackage(packageMetadata);
        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(({ rtl }) => {
            this.rtl = rtl;
            this.direction = this.rtl ? 'rtl' : 'ltr';
        });
    }
    get topClass() {
        return this.position === 'top';
    }
    get bottomClass() {
        return this.position === 'bottom';
    }
    get stickyClass() {
        return this.positionMode === 'sticky';
    }
    get fixedClass() {
        return this.positionMode === 'fixed';
    }
    get staticClass() {
        return this.positionMode === 'static';
    }
    get lightClass() {
        return this.themeColor === 'light';
    }
    get darkClass() {
        return this.themeColor === 'dark';
    }
    get inheritClass() {
        return this.themeColor === 'inherit';
    }
    ngOnDestroy() {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    }
}
AppBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: AppBarComponent, deps: [{ token: i1.LocalizationService }], target: i0.ɵɵFactoryTarget.Component });
AppBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: AppBarComponent, selector: "kendo-appbar", inputs: { position: "position", positionMode: "positionMode", themeColor: "themeColor" }, host: { properties: { "class.k-appbar": "this.hostClass", "class.k-appbar-top": "this.topClass", "class.k-appbar-bottom": "this.bottomClass", "class.k-appbar-sticky": "this.stickyClass", "class.k-appbar-fixed": "this.fixedClass", "class.k-appbar-static": "this.staticClass", "class.k-appbar-light": "this.lightClass", "class.k-appbar-dark": "this.darkClass", "class.k-appbar-inherit": "this.inheritClass", "attr.dir": "this.direction" } }, providers: [
        LocalizationService,
        {
            provide: L10N_PREFIX,
            useValue: 'kendo.appbar.component'
        }
    ], exportAs: ["kendoAppBar"], ngImport: i0, template: `
        <ng-content></ng-content>
    `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: AppBarComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'kendoAppBar',
                    selector: 'kendo-appbar',
                    template: `
        <ng-content></ng-content>
    `,
                    providers: [
                        LocalizationService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.appbar.component'
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class.k-appbar']
            }], topClass: [{
                type: HostBinding,
                args: ['class.k-appbar-top']
            }], bottomClass: [{
                type: HostBinding,
                args: ['class.k-appbar-bottom']
            }], stickyClass: [{
                type: HostBinding,
                args: ['class.k-appbar-sticky']
            }], fixedClass: [{
                type: HostBinding,
                args: ['class.k-appbar-fixed']
            }], staticClass: [{
                type: HostBinding,
                args: ['class.k-appbar-static']
            }], lightClass: [{
                type: HostBinding,
                args: ['class.k-appbar-light']
            }], darkClass: [{
                type: HostBinding,
                args: ['class.k-appbar-dark']
            }], inheritClass: [{
                type: HostBinding,
                args: ['class.k-appbar-inherit']
            }], direction: [{
                type: HostBinding,
                args: ['attr.dir']
            }], position: [{
                type: Input
            }], positionMode: [{
                type: Input
            }], themeColor: [{
                type: Input
            }] } });
