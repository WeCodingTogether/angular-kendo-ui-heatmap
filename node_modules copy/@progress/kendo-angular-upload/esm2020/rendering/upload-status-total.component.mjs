/**-----------------------------------------------------------------------------------------
* Copyright © 2023 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, Input } from '@angular/core';
import { FileMap } from '../types/file-map';
import { FileState } from '../types';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { checkIcon, exclamationCircleIcon, pauseSmIcon, uploadIcon } from '@progress/kendo-svg-icons';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-l10n";
import * as i2 from "@progress/kendo-angular-icons";
/**
 * @hidden
 */
export class UploadStatusTotalComponent {
    constructor(localization) {
        this.localization = localization;
        this.checkmarkIcon = checkIcon;
        this.exceptionSVGIcon = exclamationCircleIcon;
        this.uploadSVGIcon = uploadIcon;
        this.pauseSVGIcon = pauseSmIcon;
    }
    get iconClass() {
        if (!this.isUploading && !this.isFailed) {
            return 'checkmark';
        }
        if (!this.isUploading && this.isFailed) {
            return 'exception';
        }
        if (this.isUploading) {
            return 'upload';
        }
        if (this.isPaused) {
            return 'pause-sm';
        }
    }
    get SVGIconClass() {
        if (!this.isUploading && !this.isFailed) {
            return this.checkmarkIcon;
        }
        if (!this.isUploading && this.isFailed) {
            return this.exceptionSVGIcon;
        }
        if (this.isUploading) {
            return this.uploadSVGIcon;
        }
        if (this.isPaused) {
            return this.pauseSVGIcon;
        }
    }
    ngDoCheck() {
        this.isPaused = this.fileList.hasFileWithState([FileState.Paused]);
        this.isFailed = this.fileList.hasFileWithState([FileState.Failed]);
        this.isUploading = this.fileList.hasFileWithState([FileState.Uploading]);
        if (this.isPaused && !this.isUploading) {
            this.statusText = this.localization.get('headerStatusPaused');
        }
        else {
            this.statusText = this.isUploading ? this.localization.get('headerStatusUploading')
                : this.localization.get('headerStatusUploaded');
        }
    }
}
UploadStatusTotalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: UploadStatusTotalComponent, deps: [{ token: i1.LocalizationService }], target: i0.ɵɵFactoryTarget.Component });
UploadStatusTotalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: UploadStatusTotalComponent, selector: "kendo-upload-status-total", inputs: { fileList: "fileList" }, ngImport: i0, template: `
        <kendo-icon-wrapper
            [name]="iconClass"
            [svgIcon]="SVGIconClass"
        >
        </kendo-icon-wrapper>
        {{statusText}}
    `, isInline: true, components: [{ type: i2.IconWrapperComponent, selector: "kendo-icon-wrapper", inputs: ["name", "svgIcon", "innerCssClass", "customFontClass", "size"], exportAs: ["kendoIconWrapper"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: UploadStatusTotalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-upload-status-total',
                    template: `
        <kendo-icon-wrapper
            [name]="iconClass"
            [svgIcon]="SVGIconClass"
        >
        </kendo-icon-wrapper>
        {{statusText}}
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }]; }, propDecorators: { fileList: [{
                type: Input
            }] } });
