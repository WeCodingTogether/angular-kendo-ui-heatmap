/**-----------------------------------------------------------------------------------------
* Copyright © 2023 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Input, Component } from '@angular/core';
import { FileState } from '../types';
import { UploadService } from '../upload.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { NavigationService } from './../navigation.service';
import { arrowRotateCwSmallIcon, cancelIcon, pauseSmIcon, playSmIcon, xIcon } from '@progress/kendo-svg-icons';
import * as i0 from "@angular/core";
import * as i1 from "../upload.service";
import * as i2 from "@progress/kendo-angular-l10n";
import * as i3 from "./../navigation.service";
import * as i4 from "@progress/kendo-angular-icons";
import * as i5 from "@angular/common";
/**
 * @hidden
 */
export class FileListItemActionButtonComponent {
    constructor(uploadService, localization, navigation) {
        this.uploadService = uploadService;
        this.localization = localization;
        this.navigation = navigation;
        this.actionFocused = false;
        this.retryFocused = false;
        this.pauseResumeFocused = false;
        this.retrySVGIcon = arrowRotateCwSmallIcon;
        this.playSVGIcon = playSmIcon;
        this.pauseSVGIcon = pauseSmIcon;
        this.cancelSVGIcon = cancelIcon;
        this.deleteSVGIcon = xIcon;
    }
    onFocus(type) {
        if (type === 'action') {
            this.actionFocused = true;
        }
        if (type === 'retry') {
            this.retryFocused = true;
        }
        if (type === 'pauseResume') {
            this.pauseResumeFocused = true;
        }
    }
    onBlur(type) {
        if (type === 'retry') {
            this.retryFocused = false;
        }
        if (type === 'action') {
            this.actionFocused = false;
        }
        if (type === 'pauseResume') {
            this.pauseResumeFocused = false;
        }
    }
    onRetryClick() {
        if (this.disabled) {
            return;
        }
        this.uploadService.retryFiles(this.file.uid);
    }
    onRemoveCancelClick(event) {
        if (this.disabled) {
            return;
        }
        event.stopImmediatePropagation();
        const uid = this.file.uid;
        if (this.file.state === FileState.Uploading) {
            this.uploadService.cancelFiles(uid);
        }
        else {
            this.uploadService.removeFiles(uid);
        }
        this.navigation.focusSelectButton();
    }
    onPauseResumeClick() {
        if (this.disabled) {
            return;
        }
        const uid = this.file.uid;
        if (this.file.state === FileState.Paused) {
            this.uploadService.resumeFile(uid);
        }
        else {
            this.uploadService.pauseFile(uid);
        }
    }
    get actionButtonTitle() {
        if (this.file.state === FileState.Uploading) {
            return this.localization.get('cancel');
        }
        return this.localization.get('remove');
    }
    get retryButtonTitle() {
        return this.localization.get('retry');
    }
    get pauseResumeButtonTitle() {
        if (this.file.state === FileState.Uploading) {
            return this.localization.get('pause');
        }
        return this.localization.get('resume');
    }
    get isUploading() {
        return this.file.state === FileState.Uploading;
    }
    get isFailed() {
        return this.file.state === FileState.Failed;
    }
    get isPaused() {
        return this.file.state === FileState.Paused;
    }
    get isResumable() {
        const service = this.uploadService;
        const isResumable = service.async.chunk && service.chunk.resumable;
        const isUploading = (this.file.state === FileState.Paused) || (this.file.state === FileState.Uploading);
        return isResumable && isUploading;
    }
    get isActionButtonVisible() {
        if ((this.file.state === FileState.Uploaded || this.file.state === FileState.Initial) &&
            !this.uploadService.async.removeUrl && this.uploadService.component === 'Upload') {
            return false;
        }
        return true;
    }
}
FileListItemActionButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FileListItemActionButtonComponent, deps: [{ token: i1.UploadService }, { token: i2.LocalizationService }, { token: i3.NavigationService }], target: i0.ɵɵFactoryTarget.Component });
FileListItemActionButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: FileListItemActionButtonComponent, selector: "kendo-upload-file-list-item-action-button", inputs: { file: "file", disabled: "disabled", progress: "progress" }, ngImport: i0, template: `
    <span class="k-upload-actions">
        <span class="k-upload-pct" *ngIf="isUploading || isPaused">{{progress}}%</span>

        <button
            *ngIf="isFailed"
            type="button"
            class="k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-upload-action"
            [ngClass]="{ 'k-focus': this.retryFocused }"
            [attr.tabIndex]="-1"
            [attr.aria-hidden]="true"
            (focus)="onFocus('retry')"
            (blur)="onBlur('retry')"
            (click)="onRetryClick()"
        >
            <kendo-icon-wrapper
                name="refresh-sm"
                [svgIcon]="retrySVGIcon"
                innerCssClass="k-retry"
                [attr.aria-label]="retryButtonTitle"
                [attr.title]="retryButtonTitle"
            ></kendo-icon-wrapper>
        </button>

        <button
            *ngIf="isResumable"
            type="button"
            class="k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-upload-action"
            [ngClass]="{ 'k-focus': this.pauseResumeFocused }"
            [attr.tabIndex]="-1"
            [attr.aria-hidden]="true"
            (focus)="onFocus('pauseResume')"
            (blur)="onBlur('pauseResume')"
            (click)="onPauseResumeClick()"
        >
            <kendo-icon-wrapper
                [name]="isPaused ? 'play-sm' : 'pause-sm'"
                [svgIcon]="isPaused ? playSVGIcon : pauseSVGIcon"
                [attr.aria-label]='pauseResumeButtonTitle'
                [attr.title]='pauseResumeButtonTitle'
            ></kendo-icon-wrapper>
        </button>

        <button 
            *ngIf="isActionButtonVisible"
            class="k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-upload-action"
            type="button"
            [attr.tabIndex]="-1"
            [attr.aria-hidden]="true"
            (focus)="onFocus('action')"
            (blur)="onBlur('action')"
            [ngClass]="{ 'k-focus': this.actionFocused }"
            (click)="onRemoveCancelClick($event)"
        >
            <kendo-icon-wrapper
                [name]="isUploading ? 'cancel' : 'x'"
                [svgIcon]="isUploading ? cancelSVGIcon : deleteSVGIcon"
                [innerCssClass]="!isUploading ? 'k-delete' : ''"
                [attr.aria-label]='actionButtonTitle'
                [attr.title]='actionButtonTitle'
            ></kendo-icon-wrapper>
        </button>
    </span>
    `, isInline: true, components: [{ type: i4.IconWrapperComponent, selector: "kendo-icon-wrapper", inputs: ["name", "svgIcon", "innerCssClass", "customFontClass", "size"], exportAs: ["kendoIconWrapper"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FileListItemActionButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-upload-file-list-item-action-button',
                    template: `
    <span class="k-upload-actions">
        <span class="k-upload-pct" *ngIf="isUploading || isPaused">{{progress}}%</span>

        <button
            *ngIf="isFailed"
            type="button"
            class="k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-upload-action"
            [ngClass]="{ 'k-focus': this.retryFocused }"
            [attr.tabIndex]="-1"
            [attr.aria-hidden]="true"
            (focus)="onFocus('retry')"
            (blur)="onBlur('retry')"
            (click)="onRetryClick()"
        >
            <kendo-icon-wrapper
                name="refresh-sm"
                [svgIcon]="retrySVGIcon"
                innerCssClass="k-retry"
                [attr.aria-label]="retryButtonTitle"
                [attr.title]="retryButtonTitle"
            ></kendo-icon-wrapper>
        </button>

        <button
            *ngIf="isResumable"
            type="button"
            class="k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-upload-action"
            [ngClass]="{ 'k-focus': this.pauseResumeFocused }"
            [attr.tabIndex]="-1"
            [attr.aria-hidden]="true"
            (focus)="onFocus('pauseResume')"
            (blur)="onBlur('pauseResume')"
            (click)="onPauseResumeClick()"
        >
            <kendo-icon-wrapper
                [name]="isPaused ? 'play-sm' : 'pause-sm'"
                [svgIcon]="isPaused ? playSVGIcon : pauseSVGIcon"
                [attr.aria-label]='pauseResumeButtonTitle'
                [attr.title]='pauseResumeButtonTitle'
            ></kendo-icon-wrapper>
        </button>

        <button 
            *ngIf="isActionButtonVisible"
            class="k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-upload-action"
            type="button"
            [attr.tabIndex]="-1"
            [attr.aria-hidden]="true"
            (focus)="onFocus('action')"
            (blur)="onBlur('action')"
            [ngClass]="{ 'k-focus': this.actionFocused }"
            (click)="onRemoveCancelClick($event)"
        >
            <kendo-icon-wrapper
                [name]="isUploading ? 'cancel' : 'x'"
                [svgIcon]="isUploading ? cancelSVGIcon : deleteSVGIcon"
                [innerCssClass]="!isUploading ? 'k-delete' : ''"
                [attr.aria-label]='actionButtonTitle'
                [attr.title]='actionButtonTitle'
            ></kendo-icon-wrapper>
        </button>
    </span>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.UploadService }, { type: i2.LocalizationService }, { type: i3.NavigationService }]; }, propDecorators: { file: [{
                type: Input
            }], disabled: [{
                type: Input
            }], progress: [{
                type: Input
            }] } });
