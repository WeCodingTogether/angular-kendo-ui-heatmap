/**-----------------------------------------------------------------------------------------
* Copyright © 2023 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
/* eslint-disable @angular-eslint/component-selector */
import { Input, Component, ViewChildren, QueryList } from '@angular/core';
import { Keys } from '@progress/kendo-angular-common';
import { FileState } from '../types';
import { FileTemplateDirective } from '../templates/file-template.directive';
import { FileListItemDirective } from './file-list-item';
import { NavigationService } from '../navigation.service';
import { UploadService } from '../upload.service';
import { FileInfoTemplateDirective } from '../templates/file-info-template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../upload.service";
import * as i2 from "../navigation.service";
import * as i3 from "./file-list-single-item.component";
import * as i4 from "./file-list-multiple-items.component";
import * as i5 from "@angular/common";
import * as i6 from "./file-list-item";
/**
 * @hidden
 */
export class FileListComponent {
    constructor(uploadService, navigation) {
        this.uploadService = uploadService;
        this.navigation = navigation;
        this.onItemFocus();
        this.onItemAction();
    }
    onItemFocus() {
        this.focusSubscription = this.navigation.onFileFocus.subscribe((index) => {
            this.fileListItems.toArray()[index].focus();
        });
    }
    onItemAction() {
        this.actionSubscription = this.navigation.onFileAction.subscribe((key) => {
            this.itemActionHandler(key);
        });
    }
    itemActionHandler(key) {
        const index = this.navigation.focusedIndex;
        const item = this.fileListItems.toArray()[index];
        const uid = item.uidAttribute;
        const files = this.uploadService.files.get(uid);
        if (key === Keys.Escape && files[0].state === FileState.Uploading) {
            this.uploadService.cancelFiles(uid);
            this.navigation.focusSelectButton();
            return;
        }
        if (key === Keys.Enter && files[0].state === FileState.Failed) {
            this.uploadService.retryFiles(uid);
            return;
        }
        if (key === Keys.Delete) {
            if (files[0].state === FileState.Uploading) {
                this.uploadService.cancelFiles(uid);
            }
            else if (this.hasDelete(item)) {
                this.uploadService.removeFiles(uid);
            }
            this.navigation.focusSelectButton();
        }
        const isUploadChunk = this.uploadService.async.chunk;
        const canTogglePauseResume = key === Keys.Space && files[0].state !== FileState.Uploaded;
        if (canTogglePauseResume && isUploadChunk) {
            if (files[0].state === FileState.Paused) {
                this.uploadService.resumeFile(uid);
            }
            else {
                this.uploadService.pauseFile(uid);
            }
        }
    }
    hasDelete(item) {
        return item.element.nativeElement.getElementsByClassName('k-delete').length > 0;
    }
    ngOnDestroy() {
        this.focusSubscription.unsubscribe();
        this.actionSubscription.unsubscribe();
    }
}
FileListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FileListComponent, deps: [{ token: i1.UploadService }, { token: i2.NavigationService }], target: i0.ɵɵFactoryTarget.Component });
FileListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: FileListComponent, selector: "[kendo-upload-file-list]", inputs: { disabled: "disabled", fileList: "fileList", fileTemplate: "fileTemplate", fileInfoTemplate: "fileInfoTemplate" }, viewQueries: [{ propertyName: "fileListItems", predicate: FileListItemDirective, descendants: true }], ngImport: i0, template: `
        <ng-template ngFor
            [ngForOf]="fileList"
            let-files
            let-index="index">
            <li kendoUploadFileListItem [files]='files' [index]='index'>
                <kendo-upload-file-list-single-item
                    class='k-file-single'
                    *ngIf='files.length === 1 && !fileTemplate'
                    [disabled]='disabled'
                    [file]='files[0]'
                    [fileInfoTemplate]="fileInfoTemplate"></kendo-upload-file-list-single-item>
                <kendo-upload-file-list-multiple-items
                    class='k-file-multiple'
                    *ngIf='files.length > 1 && !fileTemplate'
                    [disabled]='disabled'
                    [files]='files'
                    [fileInfoTemplate]="fileInfoTemplate"></kendo-upload-file-list-multiple-items>
                <ng-container
                    *ngIf="fileTemplate" [ngTemplateOutlet]="fileTemplate.templateRef" [ngTemplateOutletContext]="{
                            templateRef: fileTemplate.templateRef,
                            state: files[0].state,
                            $implicit: files
                        }"></ng-container>
            </li>
        </ng-template>
    `, isInline: true, components: [{ type: i3.FileListSingleItemComponent, selector: "kendo-upload-file-list-single-item", inputs: ["disabled", "file", "fileInfoTemplate"] }, { type: i4.FileListMultipleItemsComponent, selector: "kendo-upload-file-list-multiple-items", inputs: ["disabled", "files", "fileInfoTemplate"] }], directives: [{ type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.FileListItemDirective, selector: "[kendoUploadFileListItem]", inputs: ["files", "index"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FileListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[kendo-upload-file-list]',
                    template: `
        <ng-template ngFor
            [ngForOf]="fileList"
            let-files
            let-index="index">
            <li kendoUploadFileListItem [files]='files' [index]='index'>
                <kendo-upload-file-list-single-item
                    class='k-file-single'
                    *ngIf='files.length === 1 && !fileTemplate'
                    [disabled]='disabled'
                    [file]='files[0]'
                    [fileInfoTemplate]="fileInfoTemplate"></kendo-upload-file-list-single-item>
                <kendo-upload-file-list-multiple-items
                    class='k-file-multiple'
                    *ngIf='files.length > 1 && !fileTemplate'
                    [disabled]='disabled'
                    [files]='files'
                    [fileInfoTemplate]="fileInfoTemplate"></kendo-upload-file-list-multiple-items>
                <ng-container
                    *ngIf="fileTemplate" [ngTemplateOutlet]="fileTemplate.templateRef" [ngTemplateOutletContext]="{
                            templateRef: fileTemplate.templateRef,
                            state: files[0].state,
                            $implicit: files
                        }"></ng-container>
            </li>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.UploadService }, { type: i2.NavigationService }]; }, propDecorators: { disabled: [{
                type: Input
            }], fileList: [{
                type: Input
            }], fileTemplate: [{
                type: Input
            }], fileInfoTemplate: [{
                type: Input
            }], fileListItems: [{
                type: ViewChildren,
                args: [FileListItemDirective]
            }] } });
