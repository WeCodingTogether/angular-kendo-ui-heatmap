/**-----------------------------------------------------------------------------------------
* Copyright Â© 2023 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadUrl = exports.kill = exports.execAsync = exports.exec = exports.replaceAllStringInFile = exports.replaceStringInFile = exports.cleanFolder = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const path_1 = require("path");
const child_process_1 = require("child_process");
const util_1 = require("util");
const execSync = (0, util_1.promisify)(child_process_1.exec);
function cleanFolder(dir) {
    const resolvedDir = (0, path_1.resolve)(dir);
    if (fs.existsSync(resolvedDir)) {
        console.log(`Cleanup: ${resolvedDir}`);
        fs.rmSync(resolvedDir, { recursive: true, force: true });
    }
    console.log(`Create: ${resolvedDir}`);
    fs.mkdirSync(resolvedDir, { recursive: true });
}
exports.cleanFolder = cleanFolder;
function replaceStringInFile(filePath, oldString, newString) {
    const absolutePath = (0, path_1.resolve)(filePath);
    const content = fs.readFileSync(absolutePath, 'utf8');
    fs.writeFileSync(absolutePath, content.replace(oldString, newString), 'utf8');
    console.log(`Replace: ${oldString}\nWith: ${newString}\nIn: ${filePath}`);
}
exports.replaceStringInFile = replaceStringInFile;
function replaceAllStringInFile(filePath, oldString, newString) {
    const absolutePath = (0, path_1.resolve)(filePath);
    const content = fs.readFileSync(absolutePath, 'utf8');
    const regex = new RegExp(oldString, 'g');
    fs.writeFileSync(absolutePath, content.replace(regex, newString), 'utf8');
    console.log(`Replace: ${oldString}\nWith: ${newString}\nIn: ${filePath}`);
}
exports.replaceAllStringInFile = replaceAllStringInFile;
async function exec(cmd, wd) {
    const cwd = (0, path_1.resolve)(wd);
    console.log(`Execute: ${cmd}\nCwd: ${cwd}`);
    return await execSync(cmd, { cwd: cwd });
}
exports.exec = exec;
function execAsync(cmd, wd) {
    const cwd = (0, path_1.resolve)(wd);
    console.log(`Execute: ${cmd}\nCwd: ${cwd}`);
    return (0, child_process_1.exec)(cmd, { cwd: cwd });
}
exports.execAsync = execAsync;
function kill(process) {
    // FIXES PIPEWRAP open handle
    process.stdout.destroy();
    process.stderr.destroy();
    process.stdin.destroy();
    // FIXES PROCESSWRAP open handle
    process.kill(); // (Optional: Just if you want to kill the process)
    process.unref(); // Necessary: fixes PROCESSWRAP
}
exports.kill = kill;
async function loadUrl(browser, url) {
    await browser.wait(async () => {
        try {
            await browser.navigateTo(url);
            return true;
        }
        catch {
            return false;
        }
    }, 90000, `Failed to load ${url}`, 1000);
}
exports.loadUrl = loadUrl;
//# sourceMappingURL=utils.js.map